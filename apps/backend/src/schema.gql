# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ActivatePlanInput {
  subscriptionId: String!
}

type Company {
  countryIsoCode: String!
  createdAt: DateTime!
  employees: [Employee!]
  id: ID!
  name: String!
  subscriptions: [HealthcareSubscription!]
}

input CreateSubscriptionInput {
  employeeId: Float!
  includeSpouse: Boolean!
  numOfChildren: Float!
  planId: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Demographic {
  birthDate: DateTime!
  createdAt: DateTime!
  firstName: String!
  governmentId: String!
  id: ID!
  lastName: String!
  subItems: [HealthcareSubscriptionItem!]
}

input DemographicInput {
  birthDate: DateTime!
  firstName: String!
  governmentId: String!
  lastName: String!
}

type Employee {
  birthDate: DateTime!
  companyId: ID!
  createdAt: DateTime!
  demographic: Demographic!
  demographicsId: ID!
  email: String!
  id: ID!
  maritalStatus: MaritalStatus!
}

input FamilyMemberInput {
  demographic: DemographicInput!
  role: ItemRole!
}

input FileInput {
  data: String!
  filename: String!
  mimetype: String!
}

type HealthcarePlan {
  costChildCents: String!
  costEmployeeCents: String!
  costSpouseCents: String!
  id: ID!
  name: String!
  pctChildPaidByCompany: String!
  pctEmployeePaidByCompany: String!
  pctSpousePaidByCompany: String!
  subscriptions: [HealthcareSubscription!]
}

type HealthcareSubscription {
  billingAnchor: Float!
  company: Company!
  companyId: ID!
  createdAt: DateTime!
  employee: Employee
  employeeId: ID!
  endDate: DateTime
  files: [HealthcareSubscriptionFile!]
  id: ID!
  items: [HealthcareSubscriptionItem!]
  plan: HealthcarePlan
  planId: ID!
  startDate: DateTime!
  status: SubscriptionStatus!
  type: SubscriptionType!
}

type HealthcareSubscriptionFile {
  createdAt: DateTime!
  fileSizeBytes: Float!
  healthcareSubscriptionId: ID!
  id: ID!
  mimeType: String!
  originalName: String!
  path: String!
  subscription: HealthcareSubscription
}

type HealthcareSubscriptionItem {
  createdAt: DateTime!
  demographic: Demographic!
  demographicId: ID
  healthcareSubscriptionId: ID!
  id: ID!
  role: ItemRole!
  subscription: HealthcareSubscription!
}

"""Role of person in healthcare subscription"""
enum ItemRole {
  CHILD
  EMPLOYEE
  SPOUSE
}

"""Marital status of employee"""
enum MaritalStatus {
  DIVORCED
  MARRIED
  SEPARATED
  SINGLE
  WIDOWED
}

type Mutation {
  activatePlan(activatePlanInput: ActivatePlanInput!): HealthcareSubscription!
  createSubscription(createSubscriptionInput: CreateSubscriptionInput!): HealthcareSubscription!
  uploadFamilyDemographics(uploadFamilyDemographicsInput: UploadFamilyDemographicsInput!): HealthcareSubscription!
  uploadFiles(uploadFilesInput: UploadFilesInput!): HealthcareSubscription!
}

type Query {
  """Get employees by company ID"""
  employeesByCompany(companyId: String!): [Employee!]!

  """Get all healthcare subscriptions"""
  getSubscriptions: [HealthcareSubscription!]!

  """Get all healthcare plans without relations"""
  healthcarePlans: [HealthcarePlan!]!
}

"""Healthcare subscription status"""
enum SubscriptionStatus {
  ACTIVE
  CANCELED
  DEMOGRAPHIC_VERIFICATION_PENDING
  DOCUMENT_UPLOAD_PENDING
  PLAN_ACTIVATION_PENDING
  TERMINATED
}

"""Healthcare subscription type"""
enum SubscriptionType {
  FAMILY
  INDIVIDUAL
}

input UploadFamilyDemographicsInput {
  familyMembers: [FamilyMemberInput!]!
  subscriptionId: String!
}

input UploadFilesInput {
  files: [FileInput!]!
  subscriptionId: String!
}